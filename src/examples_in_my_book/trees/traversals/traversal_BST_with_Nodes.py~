#!/usr/bin/python3
# mari von steinkirch @2013
# steinkirch at gmail

from BST_with_Nodes import BSTwithNodes, Node

class TraversalBSTwithNodes(BSTwithNodes):
    def __init__(self): 
        self.root = None

    def BFS(self): 
        self.root.level = 0 
        queue = [self.root]
        out = []
        current_level = self.root.level

        while len(queue) > 0:                 
            current_node = queue.pop(0)
            if current_node.level > current_level:
                current_level += 1
                out.append("\n")
            out.append(str(current_node.value) + " ")

            if current_node.left:
                current_node.left.level = current_level + 1
                queue.append(current_node.left)
                  
            if current_node.right:
                current_node.right.level = current_level + 1
                queue.append(current_node.right)
      
        print("".join(out)) 

    def inorder(self, node):       
        if node is not None:         
            self.inorder(node.left)
            print(node.value)
            self.inorder(node.right)

    def preorder(self, node):           
        if node is not None:    
            print(node.value)
            self.preorder(node.left)
            self.preorder(node.right)

    def postorder(self, node):           
        if node is not None:
            self.postorder(node.left)
            self.postorder(node.right)
            print(node.value)


    def inorder2(self, node):
	    if node.left is not None:
		    self.inorder2(node.left)
	    print(node.value)
	    if node.right is not None:
		    self.inorder2(node.right)

    def postorder2(self, node):
	    if node.left is not None:
		    self.inorder2(node.left)
	    if node.right is not None:
		    self.inorder2(node.right)
	    print(node.value)

    def preorder2(self, node):
	    print(node.value)
	    if node.left is not None:
		    self.inorder2(node.left)
	    if node.right is not None:
		    self.inorder2(node.right)




def main():
    tree = TraversalBSTwithNodes()     
    l1 = [10, 5, 15, 1, 6, 11, 50]
    for i in l1: tree.insert(i)
    print('Breadth-First Traversal:')
    tree.BFS()
    
    print('Inorder Traversal:')
    tree.inorder(tree.root) 
    tree.inorder2(tree.root) 
    
    print('Preorder Traversal:')
    tree.preorder(tree.root)
    tree.preorder2(tree.root)
    
    print('Postorder Traversal:')
    tree.postorder(tree.root) 
    tree.postorder2(tree.root)


if __name__ == '__main__':
    main()


